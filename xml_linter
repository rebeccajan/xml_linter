"""
CLI script to lint an .xml file or all .xml files found in a given path, if no
argument is specified then the current directory is linted. If there is
an error parsing the document for sorting then an XMLSyntaxError is flagged
Author: Rebecca Jan
Date: 2022-08
"""
#import packages
import argparse
import os
from lxml import etree


def sort_xml(xml_doc):
    """
    Helper function to sort xml
    Args:
        xml_doc (elementTree): the unlinted version of the file
    Returns:
        xml_doc (objects): the linted version of the file
    """
    # handle known type error for .xml's containing '<!--'
    known_error = "'<' not supported between instances of 'cython_function_or_method' and 'str'"
    # get namespace from doc
    name_space = xml_doc.nsmap
    # split out namespace tag tag so position is retained
    for parent in xml_doc.xpath('//*[./*]'):
        to_sort = (e for e in parent if e.tag !=
                   '{'+name_space[None]+'}')
        non_sort = (e for e in parent if e.tag ==
                    '{'+name_space[None]+'}')
        while True:
            try:
                # sort rest of doc
                parent[:] = list(non_sort) + \
                    sorted(to_sort, key=lambda e: e.tag)
            # handle known type error
            except TypeError as type_error:
                if str(type_error) == known_error:
                    break
            break
    return etree.ElementTree(xml_doc)


def check_xml(linted_file, unlinted_file):
    """
    Helper function to check sorted xml against the original file
    Args:
        linted_file (elementTree): the linted version of the file
        unlinted_file (elementTree): the unlinted version of the file
    Returns:
        Boolean: True if a diff in the xml is found, False if not
    """
    # if file has been sorted return true, else false
    return bool(etree.tostring(linted_file) != etree.tostring(unlinted_file))


def print_log(lint_log, error_log, lint_option):
    """
    Helper function to print logs of linted files and errors found if not empty
    Args:
        lint_log (list): a list of files that require linting/been linted
        error_log (list): a list of XMLSyntaxError's identified
        lint_option (string): parameter whether write or check was performed
    """
    exception_log = ''
    lint_message = ''
    if lint_option == 'check':
        lint_message = 'The following file(s) require linting: '
    else:
        lint_message = 'The following file(s) have been linted: '
    if lint_log:
        exception_log = lint_message + ", ".join(lint_log) + "\n"
    if error_log:
        exception_log += 'The following file(s) have XMLSyntaxError(s): ' + ", ".join(
            error_log)
    print(exception_log)


def write_xml(linted_doc, file_name):
    """
    Helper function to print logs if not empty and raise an exception
    Args:
        linted_doc (elementTree): the linted element tree
        file_name (string): file name to be written
    """
    etree.indent(linted_doc, space="    ")
    linted_doc.write(file_name, pretty_print=True,
                     doctype='<?xml version="1.0" encoding="UTF-8"?>')


def lint_path(to_lint, lint_option):
    """
    Function to lint xmls found in path and output log of linted files
    and any XMLSyntaxErrors found
    Args:
        to_lint (string) : the file or directory to lint,
        lint_option (string): parameter to specify write or check
    """
    linted_log = []
    error_log = []
    for subdir, dirs, files in os.walk(to_lint):
        for file in files:
            name_of_file = subdir + os.sep + file
            if name_of_file.endswith(".xml"):
                data = open(name_of_file, 'rb').read()
                while True:
                    try:
                        temp = etree.XML(data, etree.XMLParser(
                            remove_blank_text=True))
                        doc = etree.XML(data, etree.XMLParser(
                            remove_blank_text=True))
                        new_doc = sort_xml(doc)
                        if check_xml(new_doc, temp):
                            linted_log.append(file)
                            if lint_option != 'check':
                                write_xml(new_doc, name_of_file)
                    except etree.XMLSyntaxError as xml_error:
                        error_log.append(file + ': ' + str(xml_error))
                    break
    print_log(linted_log, error_log, lint_option)


def lint_file(name_of_file, lint_option):
    """
    Function to lint xml files and output errors/success log
    Args:
        name_of_file (string) : the '.xml' file to lint
        lint_option (string): parameter to specify write or check
    """
    linted_log = []
    error_log = []
    data = open(name_of_file, 'rb').read()
    while True:
        try:
            temp = etree.XML(data, etree.XMLParser(remove_blank_text=True))
            doc = etree.XML(data, etree.XMLParser(remove_blank_text=True))
            new_doc = sort_xml(doc)
            if check_xml(new_doc, temp):
                linted_log.append(name_of_file)
                if lint_option != 'check':
                    write_xml(new_doc, name_of_file)
        except etree.XMLSyntaxError as xml_error:
            error_log.append(name_of_file + ': ' + str(xml_error))
        break
    print_log(linted_log, error_log, lint_option)


if __name__ == "__main__":
    DEFAULT_PATH = os.getcwd()
    LINT_OPTION = ''
    parser = argparse.ArgumentParser()
    parser.add_argument('-w', '--write', dest='write',
                        type=str, help='Specify a file or directory path to perform a lint write')
    parser.add_argument('-c', '--check', dest='check', type=str,
                        help='Specify a file or directory path to perform a lint check')
    options = parser.parse_args()
    if options.check:
        LINT_OPTION = 'check'
        if options.check.endswith(".xml"):
            lint_file(options.check, LINT_OPTION)
        else:
            lint_path(options.check, LINT_OPTION)
    elif options.write:
        LINT_OPTION = 'write'
        if options.write.endswith(".xml"):
            lint_file(options.write, LINT_OPTION)
        else:
            lint_path(options.write, LINT_OPTION)
    else:
        LINT_OPTION = 'write'
        lint_path(DEFAULT_PATH, LINT_OPTION)
