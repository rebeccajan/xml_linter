"""
CLI script to lint an .xml file or all .xml files found in a given path, if no
argument is specified then the current directory is linted. If there is
an error parsing the document for sorting then an XMLSyntaxError is flagged
Author: Rebecca Jan
Date: 2022-08
"""
#import packages
import argparse
import os
from lxml import etree
ANCHOR = "'}'"
XML_DICT = {
    "field-meta.xml": "}fullName"
    , "flow-meta.xml": "}fullName"
    , "validationRule-meta.xml": "}fullName"
    , "labels-meta.xml": "}fullName"
    , "listView-meta.xml": "}fullName"
    , "matchingRules-meta.xml": "fullName"
    , "standardValueSet-meta.xml": "}fullName"
    , "wdash-meta.xml": "}content"
    , "wdf-meta.xml": "}content"
    , "workflow-meta.xml": "}fullName"
}


def sort_xml(xml_doc, anchor_tag):
    """
    Helper function to sort xml
    Args:
        xml_doc (elementTree): the unlinted version of the file
        anchor_tag (string): the tag to anchor position of
    Returns:
        xml_doc (elementTree): the linted version of the file
    """
    # handle known type error for .xml's containing '<!--'
    known_error = "'<' not supported between instances of 'cython_function_or_method' and 'str'"
    # get namespace from doc
    name_space = xml_doc.nsmap
    # split out anchor tags so position is retained
    for parent in xml_doc.xpath('//*[./*]'):
        while True:
            try:
                # sort rest of doc
                parent[:] = sorted(
                    parent, key=lambda x: x.tag
                    if x.tag != '{'+name_space[None]+anchor_tag else '\t')
            # handle known type error
            except TypeError as type_error:
                if str(type_error) == known_error:
                    break
            break
    return etree.ElementTree(xml_doc)


def check_xml(linted_file, unlinted_file):
    """
    Helper function to check sorted xml against the original file
    Args:
        linted_file (elementTree): the linted version of the file
        unlinted_file (elementTree): the unlinted version of the file
    Returns:
        Boolean: True if a diff in the xml is found, False if not
    """
    # if file has been sorted return true, else false
    return bool(etree.tostring(linted_file) != etree.tostring(unlinted_file))


def print_log(lint_log, error_log, lint_option):
    """
    Helper function to print logs of linted files and errors found if not empty
    Args:
        lint_log (list): a list of files that require linting
        error_log (list): a list of XMLSyntaxError's identified
        lint_option (string): parameter whether write or check was performed
    """
    exception_log = ''
    lint_message = ''
    if lint_option == 'check':
        lint_message = 'The following file(s) require linting: '
    else:
        lint_message = 'The following file(s) have been linted: '
    if lint_log:
        exception_log = lint_message + ", ".join(lint_log) + "\n"
    if error_log:
        exception_log += 'The following file(s) have XMLSyntaxError(s): ' + ", ".join(
            error_log)
    if exception_log:
        if lint_option == 'write':
            if not error_log:
                print(exception_log)
            else:
                raise Exception(exception_log)
        else:
            raise Exception(exception_log)
    else:
        print('No linting errors found')


def write_xml(linted_doc, file_name):
    """
    Helper function to print logs if not empty and raise an exception
    Args:
        linted_doc (elementTree): the linted element tree
        file_name (string): file name to be written
    """
    etree.indent(linted_doc, space="    ")
    linted_doc.write(file_name, pretty_print=True,
                     doctype='<?xml version="1.0" encoding="UTF-8"?>')


def parse_xml(to_lint, lint_option):
    """
    Function to lint xmls found in path and output log of linted files
    and any XMLSyntaxErrors found
    Args:
        to_lint (string) : the file or directory to lint
        lint_option (string): parameter to specify write or check
    """
    linted_log = []
    error_log = []
    lint_list = []
    lint_dict = {}
    lint_path = ''
    if "," in to_lint:
        lint_list = destringify(to_lint)
        for list_item in lint_list:
            if list_item.endswith(".xml") and not list_item.endswith("js-meta.xml"):
                lint_dict = lint_xml(list_item, lint_option)
                if "success" in lint_dict:
                    linted_log.append(lint_dict.get("success"))
                elif "error" in lint_dict:
                    error_log.append(lint_dict.get("error"))
    elif to_lint.endswith(".xml") and not to_lint.endswith("js-meta.xml"):
        lint_dict = lint_xml(to_lint, lint_option)
        if "success" in lint_dict:
            linted_log.append(lint_dict.get("success"))
        elif "error" in lint_dict:
            error_log.append(lint_dict.get("error"))
    else:
        lint_path = ''
        if to_lint.endswith("/"):
            lint_path = to_lint[:-1]
        else:
            lint_path = to_lint
        for subdir, dirs, files in os.walk(lint_path):
            for file in files:
                name_of_file = subdir + os.sep + file
                if name_of_file.endswith(".xml") and not list_item.endswith("js-meta.xml"):
                    lint_dict = lint_xml(name_of_file, lint_option)
                    if "success" in lint_dict:
                        linted_log.append(lint_dict.get("success"))
                    elif "error" in lint_dict:
                        error_log.append(name_of_file + ': ' +
                                         lint_dict.get("error"))
    print_log(linted_log, error_log, lint_option)


def lint_xml(lint_target, lint_option):
    """
    Function to lint xmls found in path and output log of linted files
    and any XMLSyntaxErrors found
    Args:
        lint_target (string) : the file or directory to lint
        lint_option (string): parameter to specify write or check
    Returns:
        lint_result (dict): Key indicates a lint was performed/required
        or that an XMLSyntaxError was thrown
    """
    anchor_tag = check_dict(lint_target)
    lint_result = {}
    data = open(lint_target, 'rb').read()
    while True:
        try:
            temp = etree.XML(data, etree.XMLParser(remove_blank_text=True))
            doc = etree.XML(data, etree.XMLParser(remove_blank_text=True))
            new_doc = sort_xml(doc, anchor_tag)
            if check_xml(new_doc, temp):
                lint_result["success"] = lint_target
                if lint_option == 'write':
                    write_xml(new_doc, lint_target)
        except etree.XMLSyntaxError as xml_error:
            lint_result["error"] = str(xml_error)
        break
    return lint_result


def check_dict(file_name):
    """
    Function to convert string of values to list
    Args:
        file_name (string) : the name of the file to check
    Returns:
        anchor_tag (string): the tag name to anchor
    """
    anchor_tag = ""
    file_suffix = file_name.split(".", 1)[1]
    if file_suffix in XML_DICT:
        anchor_tag = (XML_DICT.get(file_suffix))
    return anchor_tag


def destringify(to_list):
    """
    Function to convert string of values to list
    Args:
        to_list (string) : the string of files separated by a comma
    Returns:
        out_list (list): the list of files to lint
    """
    out_list = []
    buff = []
    for i in to_list:
        if i == ',':
            out_list.append(''.join(buff))
            buff = []
        else:
            buff.append(i)
    if buff:
        out_list.append(''.join(buff))
    return out_list


if __name__ == "__main__":
    ROOT_DIR = os.getcwd()
    DEFAULT_PATH = 'force-app/main/default'
    LINT_TYPE = ''
    parser = argparse.ArgumentParser(prog='XML Linter')
    parser.add_argument('-c', '--check', type=str, nargs='?', const=DEFAULT_PATH,
                        help='Specify a file or directory path to perform a lint check')
    parser.add_argument('-w', '--write', dest='write', type=str, nargs='?', const=DEFAULT_PATH,
                        help='Specify a file or directory path to perform a lint write')
    options = parser.parse_args()
    if options.write is None and options.check is not None:
        LINT_TYPE = 'check'
        parse_xml(options.check, LINT_TYPE)
    else:
        LINT_TYPE = 'write'
        parse_xml(options.write, LINT_TYPE)
